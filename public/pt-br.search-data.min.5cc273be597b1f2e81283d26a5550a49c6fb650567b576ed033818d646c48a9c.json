[{"id":0,"href":"/post/list_array_python/","title":"Introdução a listas e arrays em Python","section":"Posts","content":" Lista # Listas são estruturas mutáveis, o que significa que é possível substituir, inserir ou remover elementos contidos nelas. No entanto, é importante destacar que as listas retornadas pelos operadores de fatia e concatenação são novas listas e não partes da lista original.\nO tipo \u0026ldquo;list\u0026rdquo; inclui vários métodos chamados mutadores, cujo objetivo é modificar a estrutura de uma lista. Entre os métodos mais utilizados estão o \u0026ldquo;append\u0026rdquo;, \u0026ldquo;insert\u0026rdquo;, \u0026ldquo;pop\u0026rdquo;, \u0026ldquo;remove\u0026rdquo; e \u0026ldquo;sort\u0026rdquo;.\nUm exemplo prático do uso desses métodos seria o seguinte:\n# Criando uma lista vazia frutas = [] # Adicionando elementos com o método append frutas.append(\u0026#34;maçã\u0026#34;) frutas.append(\u0026#34;banana\u0026#34;) frutas.append(\u0026#34;abacaxi\u0026#34;) print(frutas) # [\u0026#39;maçã\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;abacaxi\u0026#39;] # Inserindo um elemento em uma posição específica com o método insert frutas.insert(1, \u0026#34;laranja\u0026#34;) print(frutas) # [\u0026#39;maçã\u0026#39;, \u0026#39;laranja\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;abacaxi\u0026#39;] # Removendo um elemento com o método remove frutas.remove(\u0026#34;banana\u0026#34;) print(frutas) # [\u0026#39;maçã\u0026#39;, \u0026#39;laranja\u0026#39;, \u0026#39;abacaxi\u0026#39;] # Removendo e retornando o último elemento com o método pop fruta_removida = frutas.pop() print(frutas) # [\u0026#39;maçã\u0026#39;, \u0026#39;laranja\u0026#39;] print(fruta_removida) # \u0026#39;abacaxi\u0026#39; # Ordenando a lista com o método sort frutas.sort() print(frutas) # [\u0026#39;laranja\u0026#39;, \u0026#39;maçã\u0026#39;] Observe que esses métodos modificam a lista original, por isso é importante ter cuidado ao utilizá-los.\nOs métodos \u0026ldquo;split\u0026rdquo; e \u0026ldquo;join\u0026rdquo; de strings são muito úteis para manipular textos em Python. O método \u0026ldquo;split\u0026rdquo; é usado para dividir uma string em uma lista de palavras com base em um determinado separador. Já o método \u0026ldquo;join\u0026rdquo; é usado para unir uma lista de palavras em uma única string, utilizando um separador específico entre elas.\nPor exemplo:\n# Usando o método split frase = \u0026#34;O rato roeu a roupa do rei de Roma\u0026#34; palavras = frase.split() print(palavras) # [\u0026#39;O\u0026#39;, \u0026#39;rato\u0026#39;, \u0026#39;roeu\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;roupa\u0026#39;, \u0026#39;do\u0026#39;, \u0026#39;rei\u0026#39;, \u0026#39;de\u0026#39;, \u0026#39;Roma\u0026#39;] # Usando o método join palavras = [\u0026#39;O\u0026#39;, \u0026#39;rato\u0026#39;, \u0026#39;roeu\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;roupa\u0026#39;, \u0026#39;do\u0026#39;, \u0026#39;rei\u0026#39;, \u0026#39;de\u0026#39;, \u0026#39;Roma\u0026#39;] nova_frase = \u0026#34; \u0026#34;.join(palavras) print(nova_frase) # \u0026#39;O rato roeu a roupa do rei de Roma\u0026#39; No exemplo acima, ao usar o método \u0026ldquo;split\u0026rdquo; sem passar um separador como argumento, ele divide a frase em uma lista de palavras com base nos espaços em branco. Em seguida, ao usar o método \u0026ldquo;join\u0026rdquo; com um espaço em branco como separador, a lista de palavras é unida novamente em uma única string.\nPodemos observar que uma lista, possui métodos bem definidos para serem utilizados, facilitando ao programador trabalhar com varios tipos, e formas de manipulação.\nVale lembrar que esses métodos são muito flexíveis e podem ser utilizados de diversas formas para manipular textos em Python.\nArray # O array é uma estrutura de dados que representa uma sequência de itens acessíveis ou substituíveis em posições de índice específicas. Ao contrário das listas, o array tem um comprimento fixo quando é criado e não permite adicionar ou remover posições. A estrutura subjacente de uma lista Python é um array, que permite acesso e substituição de itens em posições específicas e também examinar seu comprimento e obter sua representação em string.\nO módulo array do Python possui uma classe array que se comporta como uma lista, mas é limitada a armazenar apenas números. Para criar uma nova estrutura de dados que possa armazenar diferentes tipos de dados, podemos usar uma lista Python para isso. A classe Array tem funcionalidades que permitem usar operações comuns como [], len, str e loop for com objetos de array. É importante lembrar que o programador deve definir o tamanho físico ou a capacidade do Array quando ele é criado e o valor padrão para preenchimento é \u0026ldquo;None\u0026rdquo;.\n| Operações Array usuário | Método na classe Array | |-------------------------|--------------------------------------| | a = Array(10) | __init__(capacity, fillValue = None) | | len(a) | __len__() | | str(a) | __str__() | | para o item em a: | __iter__() | | a[index] | __getitem__(index) | | a[index] = new_item | __setitem__(index, new_item) | Quando uma operação é realizada em um objeto Array, o Python chama automaticamente o método correspondente. Por exemplo, ao percorrer um objeto Array com um loop for, o Python chamará automaticamente o método iter do objeto Array.\nAbaixo está o código para implementar a classe Array e uma interação com o shell para demonstrar seu uso. Após criar e testar a classe Array, é importante lembrar que sua utilização é mais restrita do que uma lista e exige uma abordagem diferente ao usá-la.\nclass Array: \u0026#34;\u0026#34;\u0026#34;Representa uma array.\u0026#34;\u0026#34;\u0026#34; def __init__(self, capacity, fillValue=None): \u0026#34;\u0026#34;\u0026#34;Capacidade é o tamanho estático do array. fillValue é colocado em cada posição.\u0026#34;\u0026#34;\u0026#34; self.items = [fillValue] * capacity def __len__(self): \u0026#34;\u0026#34;\u0026#34;A capacidade do array.\u0026#34;\u0026#34;\u0026#34; return len(self.items) def __str__(self): \u0026#34;\u0026#34;\u0026#34;A representação de string do array.\u0026#34;\u0026#34;\u0026#34; return str(self.items) def __iter__(self): \u0026#34;\u0026#34;\u0026#34;Suporta o percurso com um laço for.\u0026#34;\u0026#34;\u0026#34; return iter(self.items) def __getitem__(self, index): \u0026#34;\u0026#34;\u0026#34;Operador de subscrito para acesso no índice.\u0026#34;\u0026#34;\u0026#34; return self.items[index] def __setitem__(self, index, newItem): \u0026#34;\u0026#34;\u0026#34;Operador de subscrito para substituição no índice.\u0026#34;\u0026#34;\u0026#34; self.items[index] = newItem Agora podemos chamar nossa classe Array:\nfrom arrays import Array a = Array(5) # Instância um array com 5 posições len(a) # Apresenta o número de posições print(a) # Mostra o contéudo no array \u0026gt;\u0026gt;\u0026gt; [None, None, None, None, None] for i in range(len(a)): # Substitui o contéudo do array a[i] = i + 1 a[0] # Acessa o item na primeira posição \u0026gt;\u0026gt;\u0026gt; 1 for item in range(len(a)): # Percorre o array, para mostrar os valores armazenados print(item) Concluímos que, embora mais restritivo, o Array é uma estrutura de dados importante para certos casos de uso em que o tamanho é fixo e não precisa ser alterado posteriormente.\nReferência: Lambert, Kenneth A. Fundamentos de Python: estruturas de dados. Cengage Learning, 2019.\n"},{"id":1,"href":"/post/mux/","title":"Multiplexadores","section":"Posts","content":"Possui M entradas de dados e uma saída (Mx1), permitindo que apenas uma das entradas seja passada para a saída. Pode ser chamado de seletor, pois seleciona uma das entradas para à saída.\nMultiplexador produz um 1 ou um 0 na saída, dependendo de se a entrada selecionada tem um 1 ou 0.\nMultiplexador 2x1 # Tem duas entradas de dados i1 e i0, uma entrada de seleção s0 e uma saída de dados d.\nMultiplexador 4x1 # Quatro entradas de dados i3, i2, i1 e i0, duas entradas de seleção s1 e s0, e uma saída de dados d.\nUm multiplexador sempre tem uma saída de dados, não importando quantas entradas possui.\nEx:. 4x1\nPara saber o número de seleções é necessário aplicar log2(x), assim você terá a quantidade de seleção.\nPara 4x1, aplicar log2(4) = 2, ou seja este possui duas seleções.\nMultiplexador Mx1 de N bits # São usados seletivamente para deixar passar não só bits isolados, mas também itens com N bits de dados.\nUm conjunto de entradas A pode consistir em quatros bits, a3, a2, a1 e a0, em outro conjunto de entradas b também podem consistir em quatro bits.\nConduzindo o conjunto em uma saída de 4 bits c.\nConteúdo retirado do livro Sistemas Digitais, por Frank Vahid.\n"},{"id":2,"href":"/post/dicionario/","title":"Utilizando dicionários em Python: uma alternativa ao switch case.","section":"Posts","content":"Em Python, um dicionário é uma coleção de pares chave-valor, onde cada chave é única e mapeia para um valor específico. É semelhante a uma tabela hash em outras linguagens de programação.\nUma vantagem de se utilizar dicionários em Python é que eles permitem a busca e acesso aos valores armazenados de forma rápida e eficiente, em comparação com o uso de estruturas de controle como o switch case.\nPara ilustrar essa ideia, vamos supor que temos uma função que recebe como parâmetro uma string contendo um nome de um mês, e precisamos retornar o número correspondente a esse mês. Em outras linguagens, poderíamos utilizar um switch case para resolver esse problema. Em Python, uma abordagem mais simples e elegante seria utilizar um dicionário:\ndef obter_numero_do_mes(mes): numeros = { \u0026#39;janeiro\u0026#39;: 1, \u0026#39;fevereiro\u0026#39;: 2, \u0026#39;março\u0026#39;: 3, \u0026#39;abril\u0026#39;: 4, \u0026#39;maio\u0026#39;: 5, \u0026#39;junho\u0026#39;: 6, \u0026#39;julho\u0026#39;: 7, \u0026#39;agosto\u0026#39;: 8, \u0026#39;setembro\u0026#39;: 9, \u0026#39;outubro\u0026#39;: 10, \u0026#39;novembro\u0026#39;: 11, \u0026#39;dezembro\u0026#39;: 12 } return numeros.get(mes.lower(), -1) Nesse exemplo, definimos um dicionário chamado numeros, onde cada chave é um nome de mês e o valor correspondente é o número desse mês. Em seguida, utilizamos o método get() do dicionário para obter o valor correspondente à chave passada como parâmetro. O segundo parâmetro do método get() é opcional e é o valor a ser retornado caso a chave não exista no dicionário. No nosso caso, se o valor da chave mes não existir no dicionário, retornamos -1.\nO Python também introduziu recentemente uma nova estrutura de controle chamada match case, que é semelhante ao switch case, mas mais expressiva e flexível. A partir da versão 3.10 do Python, podemos utilizar o match case para substituir o dicionário do exemplo anterior:\ndef obter_numero_do_mes(mes): return match(mes.lower()): case \u0026#39;janeiro\u0026#39;: return 1 case \u0026#39;fevereiro\u0026#39;: return 2 case \u0026#39;março\u0026#39;: return 3 case \u0026#39;abril\u0026#39;: return 4 case \u0026#39;maio\u0026#39;: return 5 case \u0026#39;junho\u0026#39;: return 6 case \u0026#39;julho\u0026#39;: return 7 case \u0026#39;agosto\u0026#39;: return 8 case \u0026#39;setembro\u0026#39;: return 9 case \u0026#39;outubro\u0026#39;: return 10 case \u0026#39;novembro\u0026#39;: return 11 case \u0026#39;dezembro\u0026#39;: return 12 case _: return -1 Nesse exemplo, utilizamos a estrutura match case para realizar a mesma tarefa que o dicionário. O valor da variável mes é comparado com cada um dos padrões definidos nos casos, e a ação correspondente é executada quando um padrão corresponde. O caso _ é um caso padrão, que é executado quando nenhum dos outros casos é correspondido. Note que, ao contrário do dicionário, o match case suporta apenas valores simples como padrões (por exemplo, inteiros, strings, etc.) e não suporta operadores complexos ou funções de comparação personalizadas.\nEm resumo, o dicionário é uma estrutura de dados poderosa em Python que permite mapear chaves para valores e é uma alternativa mais eficiente e legível ao switch case em muitos casos. O match case é uma nova funcionalidade em Python 3.10 que oferece recursos semelhantes ao switch case, mas ainda não está disponível em versões anteriores.\n"},{"id":3,"href":"/post/introcpp/","title":"Introdução ao C++","section":"Posts","content":"\nEstrutura básica # Para iniciarmos um programa em c++, precisamos importar algumas bibliotecas padrão da linguagem, normalmente quando usamos alguma IDE de programação, quando criamos o arquivo .cpp direto pela IDE, ela por definição trás essa estrutura. Mas como vamos iniciar do zero, irei explicar como criar essa estrutura, explicando cada item.\nPrimeiro passo # Vamos iniciar nosso programa criando um arquivo de texto, com a extenção .cpp, vamos dar o nome para nosso arquivo de primeiroCodigo.cpp, seu arquivo não deve conter espaço entre as palavras e nem acentuação, por definicição e boas práticas iremos evitar esse tipo de escrita para nossos programas.\nApós criar o arquivo, abra ele com um editor de texto de sua preferência, eu irei usar o vim para essa introdução, sinta-se a vontade para escolher qualquer editor.\nFeito a criação e a abertura do nosso arquivo, o primeiro passo é importar algumas biblioteacas para o funcionamento do código.\nA primeira coisa que precisamos importar ao código é biblioteca iostream, ela é muito importante para o funcionamento do do nosso programa em c++, é a base para tudo que iremos fazer daqui pra frente.\nPara importamos a biblioteca iremos utilizar o comando #include, no qual faz a importação das bibliotecas dentro do nosso sistema, seu código deverá ficar assim:\n#include \u0026lt;iostream\u0026gt; Você pode estar se perguntando o que seria esse tal de iostream, ele nada mais é do que um gerenciador de entrada e saída do seu programa (I|O), é com ele que podemos fazer todo o gerenciamento, de forma \u0026ldquo;automatica\u0026rdquo;, do nosso programa, como por exemplo, uma saida de texto para o usuário informando uma mensagem de \u0026ldquo;olá\u0026rdquo;. Claro que não se limita só a isso, mas sua principal função é garantir essa interação de usuário e máquina, caso contrário seu programa nunca irá funcionar.\nApós a importação da nosso biblioteca de entra e saída (iostream), vamos fazer mais uma inclusão ao código, agora iremos definir o uso de uma biblioteca, que é a std (Standar Template Library), é uma bibliotexa padronizada de funções, que oferece ao desenvolver um conjunto de classes de uso genérico, facilitando o desenvolvimento.\nPor exemplo # Sem essa biblioteca, um código simples de saída ficaria assim:\nstd::cout \u0026lt;\u0026lt; \u0026#34;Olá Mundo!\u0026#34;; Agora utilizando a biblioteca, podemos reduzir nossa escrita:\ncout \u0026lt;\u0026lt; \u0026#34;Olá Mundo!\u0026#34;; Dessa forma, conseguirmos diminuir as chances de erros no programa, já que não precisaremos fazer essa inclusões, que se tornam chatas ao longo do tempo.\nAgora que já expliquei um pouco sobre sua importância, vamos adiciona-lá ao código.\n#include \u0026lt;iostream\u0026gt; using namespace std; Feita essas inclusões, vamos agora iniciar o programa, para isso iremos criar uma função chamada main, do tipo inteiro, pois precisamos sempres retornar algo ao sistema, e nesse caso por padrão o programa deve conter essa estrutura. O main é a principal parte do seu sistema, para desenvolvermos qualquer aplicação, sempre necessitaremos iniciá-lo, caso isso não seja feito, seu programa não irá funcionar, pois não existe nenhuma referência de instancimento, onde sua estrutura deve começar e terminar.\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { } Lembre-se que essa função precisa retornar alguma coisa, então vamos adicionar um return no código, essa resposta será zero (return 0):\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { return 0; } Pronto, agora você já sabe qual é a estrutura básica de um programa em c++. Se você estiver utilizando linux, porderá rodar o código direto pelo terminal usando o seguindo comando:\ng++ -o nome_para_o_arquivo nome_do_arquivo.cpp O nome_para_o_arquivo é o programa que será criado para ser executado, já o nome_do_arquivo.cpp é o seu código.\nDepois é só executar usando:\n./nome_para_o_arquivo Se você fizer esse procedimento com o arquivo criado nessa introdução, provavelmente não aparecer nenhuma saída, pois não há nada para ser feito. Apenas estruturamos o projeto no formato de programação em c++.\nVariáveis # Uma variável é um espaço separado pelo sistema dentro da memória RAM, esse espaço é temporário, já que fica alocado nessa parte do hardware. Para termos acesso a essas variáveis precisamos sempre indica-lás dentro do nosso código, o nome e o tipo dela.\nComo na maioria das linguagens o cpp também contém suas formas de armazenamento de informações.\nOs tipos de variáveis em c++ # Tipo Tamanho int (16bits) 2 bytes int (32bits) 4 bytes char 1 byte (caracteres) double 8 bytes float 4 bytes bool 1 byte (true/false) unsigned shirt int 2 bytes short int 2 bytes unsigned long int 4 bytes long int 4 bytes unsigned int (16 bits) 4 bytes string variável (texto) As variáveis mais comuns de se utilizar quando se inicia em programação, são:\nint - inteiro armazena valores como, 1, 2, 55 e assim por diante (ou seja somente números). char - caracteres armazena valores como, a, b, c, e assim por diante (ou seja somente letras). float - decimal armazena valores como, 1.2, 2.2, 25.510 e assim por diante (ou seja números com casas decimais). double - decimal Muito parecido com o float, mas possui uma diferença bem importante, o double irá armazenar valores com mais precisão, se tivermos algum valor que seu resultado seja 4,9999999999, o float irá aproximar o valor,\tficando 4.5, já double tenta manter o valor mais proximo ao calculado. string - Textos armazena valores como, nomes, textos, etc\u0026hellip; Agora que já vimos os tipos de variáveis, vamos criar um código para exemplificar o uso de algumas delas.\nPara isso crie um novo programa cpp, irei chamar o meu de variaveis.cpp, após criar o arquivo, iremos adicionar alguns tipos de variáveis:\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { int inteiro; char letra; double decimal; float decimal2; bool verdadeiro_false; string texto; return 0; } Feito isto, agora precisamos informar um valor padrão, caso não façamos isso, sua variável tem o risco de ser iniciada com valores aleátorios, prejudicando seu desenvolvimento, baśicamente irá iniciar com \u0026ldquo;LIXO\u0026rdquo; de memória, para evitarmos alguns erros, iremos sempre indicar um valor padrão:\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { int inteiro = 0; char letra = \u0026#39;c\u0026#39;; double decimal = 5.2; float decimal2 = 5.2; bool verdadeiro = true; bool falso = false; string texto = \u0026#34;Programação em cpp\u0026#34;; return 0; } A saída deverá sair parecida:\n0 c 5.2 5.2 1 0 Programação Já que informamos os tipos, nomes e valores, vamos imprimir isso para vermos o que irá aparecer. Para imprimir alguma saída precisamos usar o comando cout, como foi utilizado anteriormente, tente fazer sozinho, para ver o resultado.\nSe você conseguiu, vamos continuar.\nVocê deve ter percebido que o valor booleano (bool) foi imprimido na tela com o digíto um. Isso porque, true corresponde a um, e false a zero.\nRecebendo valores digitados pelo usuário # Agora iremos receber algumas informaçãoes digitadas pelo usuário, será algo simples, mas muito importante para podermos desenvolver aplicações mais complexas futuramente.\nVamos criar um sistema que solicitará ao usuário, nome, idade, peso e altura.\nUtilizando os tipos de variáveis:\nnome vai ser do tipo string\nidade vai ser do tipo inteiro\npeso vai ser do tipo float\naltura vai ser do tipo float\nObs: Comando de entrada\ncout \u0026laquo; \u0026ldquo;Imprime uma mensagem ao usuário\u0026rdquo;; cin \u0026raquo; Recebe mensagem do usuário; Agora que determinamos os tipos de variáveis que utilizaremos, vamos iniciar o desenvolvimento, crie seu programa e mão na massa.\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { string nome; int idade = 0; float peso = 0.0; float altura = 0.0; //Agora vamos criar a interção com o usuário cout \u0026lt;\u0026lt; \u0026#34;Digite seu nome: \u0026#34;; cin \u0026gt;\u0026gt; nome; cout \u0026lt;\u0026lt; \u0026#34;Digite sua idade: \u0026#34;; cin \u0026gt;\u0026gt; idade; cout \u0026lt;\u0026lt; \u0026#34;Digite seu peso: \u0026#34;; cin \u0026gt;\u0026gt; peso; cout \u0026lt;\u0026lt; \u0026#34;Digite sua altura: \u0026#34;; cin \u0026gt;\u0026gt; altura; return 0; } Já coletamos as informações, agora vamos mostrar elas ao usuário. Ainda dentro do seu programa, após toda a coleta de dados, vamos adicionar a saída.\nVamos concatenar as variáveis numa mensagem, é simples, para realizar esse procedimento é necessario utilizarmos no cout nosso comando de saída, o simbolo \u0026laquo; após a sua resposta, ficará assim:\ncout \u0026laquo; \u0026ldquo;Sua mensagem aqui \u0026quot; \u0026laquo; variável aqui \u0026laquo; endl;\nO endl é um comando de quebra de linha, você pode utilizar aspas duplas barra n (\\n) no lugar dele, terá o mesmo efeito, ou apenas utilizar aspas duplas (\u0026rdquo; \u0026ldquo;), porém apenas fechará o código.\n//mostrando os valores inserido ao usuário cout \u0026lt;\u0026lt; \u0026#34;Nome: \u0026#34; \u0026lt;\u0026lt; nome \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; \u0026#34;Idade: \u0026#34; \u0026lt;\u0026lt; idade \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; \u0026#34;Peso: \u0026#34; \u0026lt;\u0026lt; peso \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; \u0026#34;Altura: \u0026#34; \u0026lt;\u0026lt; altura \u0026lt;\u0026lt; endl; Só rodar o seu código, e você verá as mensagens na sua tela.\nO código completo deve ficar assim:\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { string nome; int idade = 0; float peso = 0.0; float altura = 0.0; //Agora vamos criar a interção com o usuário cout \u0026lt;\u0026lt; \u0026#34;Digite seu nome: \u0026#34;; cin \u0026gt;\u0026gt; nome; cout \u0026lt;\u0026lt; \u0026#34;Digite sua idade: \u0026#34;; cin \u0026gt;\u0026gt; idade; cout \u0026lt;\u0026lt; \u0026#34;Digite seu peso: \u0026#34;; cin \u0026gt;\u0026gt; peso; cout \u0026lt;\u0026lt; \u0026#34;Digite sua altura: \u0026#34;; cin \u0026gt;\u0026gt; altura; //mostrando os valores inserido ao usuário cout \u0026lt;\u0026lt; \u0026#34;Nome: \u0026#34; \u0026lt;\u0026lt; nome \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; \u0026#34;Idade: \u0026#34; \u0026lt;\u0026lt; idade \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; \u0026#34;Peso: \u0026#34; \u0026lt;\u0026lt; peso \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; \u0026#34;Altura: \u0026#34; \u0026lt;\u0026lt; altura \u0026lt;\u0026lt; endl; return 0; } "},{"id":4,"href":"/about/","title":"Sobre o blog","section":"Home","content":"A criação deste blog pessoal, é para poder compartilhar conhecimentos adquiridos através dos meus estudos.\nTentando explicar alguns conceitos do mundo da programação e desenvolvimento de uma forma simples.\nAbordarei assuntos voltados a sistemas operacionais, desenvolvimento, microcontroladores e embarcados.\n"}]